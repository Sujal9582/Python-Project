import sqlite3
import time
from datetime import datetime

# Database Setup (SQLite)
def create_connection():
    conn = sqlite3.connect('smart_parking.db')
    return conn

# Create tables
def create_tables():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS parking_slots (
                        slot_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        is_occupied BOOLEAN DEFAULT 0
                    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
                        transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        slot_id INTEGER,
                        entry_time TEXT,
                        exit_time TEXT,
                        charge REAL,
                        FOREIGN KEY (slot_id) REFERENCES parking_slots(slot_id)
                    )''')
    conn.commit()
    conn.close()

# Function to add parking slots
def add_parking_slots(number_of_slots):
    conn = create_connection()
    cursor = conn.cursor()
    for i in range(number_of_slots):
        cursor.execute("INSERT INTO parking_slots (is_occupied) VALUES (0)")
    conn.commit()
    conn.close()

# Function to view parking slots
def view_parking_slots():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT slot_id, is_occupied FROM parking_slots")
    slots = cursor.fetchall()
    print("\nAvailable Parking Slots:")
    for slot in slots:
        status = "Occupied" if slot[1] == 1 else "Available"
        print(f"Slot {slot[0]}: {status}")
    conn.close()

# Function to park a vehicle
def park_vehicle():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT slot_id FROM parking_slots WHERE is_occupied = 0 LIMIT 1")
    slot = cursor.fetchone()
    if slot:
        slot_id = slot[0]
        entry_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("UPDATE parking_slots SET is_occupied = 1 WHERE slot_id = ?", (slot_id,))
        cursor.execute("INSERT INTO transactions (slot_id, entry_time) VALUES (?, ?)", (slot_id, entry_time))
        conn.commit()
        print(f"Vehicle parked at Slot {slot_id}. Entry Time: {entry_time}")
    else:
        print("No available parking slots.")
    conn.close()

# Function to exit a vehicle
def exit_vehicle():
    conn = create_connection()
    cursor = conn.cursor()
    slot_id = int(input("Enter slot ID to exit: "))
    cursor.execute("SELECT * FROM transactions WHERE slot_id = ? AND exit_time IS NULL", (slot_id,))
    transaction = cursor.fetchone()
    if transaction:
        exit_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        entry_time = transaction[2]
        time_in = datetime.strptime(entry_time, "%Y-%m-%d %H:%M:%S")
        time_out = datetime.strptime(exit_time, "%Y-%m-%d %H:%M:%S")
        duration = (time_out - time_in).total_seconds() / 3600  # Duration in hours
        charge = duration * 10  # Assuming rate is 10 units per hour
        cursor.execute("UPDATE parking_slots SET is_occupied = 0 WHERE slot_id = ?", (slot_id,))
        cursor.execute("UPDATE transactions SET exit_time = ?, charge = ? WHERE transaction_id = ?", 
                       (exit_time, charge, transaction[0]))
        conn.commit()
        print(f"Vehicle exited from Slot {slot_id}. Total Charge: {charge} units.")
    else:
        print("Invalid slot ID or no vehicle parked in this slot.")
    conn.close()

# Main Menu
def main_menu():
    create_tables()  # Ensure tables are created
    while True:
        print("\nSmart Parking System")
        print("1. View Parking Slots")
        print("2. Park Vehicle")
        print("3. Exit Vehicle")
        print("4. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            view_parking_slots()
        elif choice == '2':
            park_vehicle()
        elif choice == '3':
            exit_vehicle()
        elif choice == '4':
            print("Exiting system...")
            break
        else:
            print("Invalid choice. Please try again.")

# Main execution
if __name__ == "__main__":
    add_parking_slots(10)  # Add 10 parking slots to the system for example
    main_menu()

